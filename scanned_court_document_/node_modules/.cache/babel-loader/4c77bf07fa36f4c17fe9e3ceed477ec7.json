{"ast":null,"code":"/**\n * ColumnsParser\n * Classifies items into columns, nearest to the left position of their corresponding header.\n * @author Adrien Joly, http://github.com/adrienjoly\n * This content is released under the MIT License.\n **/\nvar LOG = require(\"./LOG.js\");\n\nfunction getColumnIndex(cols, x) {\n  var bestDist = null;\n\n  for (var i = 0; i < cols.length; ++i) {\n    var dist = Math.abs(x - cols[i].x);\n\n    if (bestDist !== null && dist > bestDist) {\n      break;\n    } else {\n      bestDist = dist;\n    }\n  }\n\n  return i - 1;\n}\n\nfunction ColumnsParser(colNames) {\n  this.cols = [];\n  var cols = this.cols,\n      colNames = colNames.slice(),\n      // clone (for parameter immutability)\n  line = -1; // -1 = header\n\n  this.processItem = function (item) {\n    if (line == -1) {\n      // parse x-position of column headers\n      var i = colNames.indexOf(item.text);\n\n      if (i > -1) {\n        LOG(\"ColumnsParser header\", i, item.text, \"=> x:\", item.x);\n        cols[i] = {\n          name: item.text,\n          x: item.x,\n          items: []\n        };\n        colNames[i] = \"\"; // needed so that a column name can be associated to more than 1 index\n      }\n\n      if (cols.length == colNames.length) {\n        // done parsing header\n        line++;\n      }\n    } else {\n      cols[getColumnIndex(cols, item.x)].items.push(item);\n    }\n  };\n}\n\n;\nmodule.exports = ColumnsParser;","map":null,"metadata":{},"sourceType":"script"}