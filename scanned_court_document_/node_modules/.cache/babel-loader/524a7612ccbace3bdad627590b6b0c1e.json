{"ast":null,"code":"'use strict';\n\nvar nodeUtil = require(\"util\"),\n    _ = require(\"underscore\"),\n    PDFUnit = require('./pdfunit.js');\n\nvar PDFLine = function PFPLineClosure() {\n  'use strict'; // private static\n\n  var _nextId = 1;\n  var _name = 'PDFLine'; // constructor\n\n  var cls = function cls(x1, y1, x2, y2, lineWidth, color, dashed) {\n    // private\n    var _id = _nextId++; // public (every instance will have their own copy of these methods, needs to be lightweight)\n\n\n    this.get_id = function () {\n      return _id;\n    };\n\n    this.get_name = function () {\n      return _name + _id;\n    };\n\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n    this.lineWidth = lineWidth || 1.0;\n    this.color = color;\n    this.dashed = dashed;\n  };\n\n  var _setStartPoint = function _setStartPoint(oneLine, x, y) {\n    oneLine.x = PDFUnit.toFormX(x);\n    oneLine.y = PDFUnit.toFormY(y);\n  }; // public (every instance will share the same method, but has no access to private fields defined in constructor)\n\n\n  cls.prototype.processLine = function (targetData) {\n    var xDelta = Math.abs(this.x2 - this.x1);\n    var yDelta = Math.abs(this.y2 - this.y1);\n    var minDelta = this.lineWidth;\n    var oneLine = {\n      x: 0,\n      y: 0,\n      w: PDFUnit.toFixedFloat(this.lineWidth),\n      l: 0\n    }; //MQZ Aug.28.2013, adding color support, using color dictionary and default to black\n\n    var clrId = PDFUnit.findColorIndex(this.color);\n\n    if (clrId < 0) {\n      oneLine = _.extend({\n        oc: this.color\n      }, oneLine);\n    } else if (clrId > 0 && clrId < PDFUnit.colorCount() - 1) {\n      oneLine = _.extend({\n        clr: clrId\n      }, oneLine);\n    } //MQZ Aug.29 dashed line support\n\n\n    if (this.dashed) {\n      oneLine = _.extend({\n        dsh: 1\n      }, oneLine);\n    }\n\n    if (yDelta < this.lineWidth && xDelta > minDelta) {\n      //HLine\n      if (this.lineWidth < 4 && xDelta / this.lineWidth < 4) {\n        nodeUtil.p2jinfo(\"Skipped: short thick HLine: lineWidth = \" + this.lineWidth + \", xDelta = \" + xDelta);\n        return; //skip short thick lines, like PA SPP lines behinds checkbox\n      }\n\n      oneLine.l = PDFUnit.toFormX(xDelta);\n      if (this.x1 > this.x2) _setStartPoint.call(this, oneLine, this.x2, this.y2);else _setStartPoint.call(this, oneLine, this.x1, this.y1);\n      targetData.HLines.push(oneLine);\n    } else if (xDelta < this.lineWidth && yDelta > minDelta) {\n      //VLine\n      if (this.lineWidth < 4 && yDelta / this.lineWidth < 4) {\n        nodeUtil.p2jinfo(\"Skipped: short thick VLine: lineWidth = \" + this.lineWidth + \", yDelta = \" + yDelta);\n        return; //skip short think lines, like PA SPP lines behinds checkbox\n      }\n\n      oneLine.l = PDFUnit.toFormY(yDelta);\n      if (this.y1 > this.y2) _setStartPoint.call(this, oneLine, this.x2, this.y2);else _setStartPoint.call(this, oneLine, this.x1, this.y1);\n      targetData.VLines.push(oneLine);\n    }\n  };\n\n  return cls;\n}();\n\nmodule.exports = PDFLine;","map":null,"metadata":{},"sourceType":"script"}