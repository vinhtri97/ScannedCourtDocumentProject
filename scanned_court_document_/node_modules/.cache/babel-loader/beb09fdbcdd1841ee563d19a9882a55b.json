{"ast":null,"code":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @typechecks\r\n * \r\n */\n\n/**\r\n * Stateful API for text direction detection\r\n *\r\n * This class can be used in applications where you need to detect the\r\n * direction of a sequence of text blocks, where each direction shall be used\r\n * as the fallback direction for the next one.\r\n *\r\n * NOTE: A default direction, if not provided, is set based on the global\r\n *       direction, as defined by `UnicodeBidiDirection`.\r\n *\r\n * == Example ==\r\n * ```\r\n * var UnicodeBidiService = require('UnicodeBidiService');\r\n *\r\n * var bidiService = new UnicodeBidiService();\r\n *\r\n * ...\r\n *\r\n * bidiService.reset();\r\n * for (var para in paragraphs) {\r\n *   var dir = bidiService.getDirection(para);\r\n *   ...\r\n * }\r\n * ```\r\n *\r\n * Part of our implementation of Unicode Bidirectional Algorithm (UBA)\r\n * Unicode Standard Annex #9 (UAX9)\r\n * http://www.unicode.org/reports/tr9/\r\n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar UnicodeBidi = require('./UnicodeBidi');\n\nvar UnicodeBidiDirection = require('./UnicodeBidiDirection');\n\nvar invariant = require('./invariant');\n\nvar UnicodeBidiService = function () {\n  /**\r\n   * Stateful class for paragraph direction detection\r\n   *\r\n   * @param defaultDir  Default direction of the service\r\n   */\n  function UnicodeBidiService(defaultDir) {\n    _classCallCheck(this, UnicodeBidiService);\n\n    if (!defaultDir) {\n      defaultDir = UnicodeBidiDirection.getGlobalDir();\n    } else {\n      !UnicodeBidiDirection.isStrong(defaultDir) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Default direction must be a strong direction (LTR or RTL)') : invariant(false) : void 0;\n    }\n\n    this._defaultDir = defaultDir;\n    this.reset();\n  }\n  /**\r\n   * Reset the internal state\r\n   *\r\n   * Instead of creating a new instance, you can just reset() your instance\r\n   * everytime you start a new loop.\r\n   */\n\n\n  UnicodeBidiService.prototype.reset = function reset() {\n    this._lastDir = this._defaultDir;\n  };\n  /**\r\n   * Returns the direction of a block of text, and remembers it as the\r\n   * fall-back direction for the next paragraph.\r\n   *\r\n   * @param str  A text block, e.g. paragraph, table cell, tag\r\n   * @return     The resolved direction\r\n   */\n\n\n  UnicodeBidiService.prototype.getDirection = function getDirection(str) {\n    this._lastDir = UnicodeBidi.getDirection(str, this._lastDir);\n    return this._lastDir;\n  };\n\n  return UnicodeBidiService;\n}();\n\nmodule.exports = UnicodeBidiService;","map":null,"metadata":{},"sourceType":"script"}