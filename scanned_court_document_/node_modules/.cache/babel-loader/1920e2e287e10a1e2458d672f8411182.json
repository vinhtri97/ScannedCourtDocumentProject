{"ast":null,"code":"/**\n * Applies a list of simple actions to apply to each provided item, in order to accumulate field values.\n * Provides a list of parsed `fields`.\n * Calls `callback(error, this)` when all accumulators were processed, or when processing a null item.\n **/\nfunction SequentialParser(accumulators, callback) {\n  var step = 0;\n  var fields = {};\n  return {\n    fields: fields,\n    addField: function addField(key, value) {\n      this.fields[key] = value;\n    },\n    parseItem: function parseItem(item) {\n      if (step >= accumulators.length) {\n        return console.warn(\"warning: skipping item, because SequentialParser is done.\");\n      }\n\n      var current = accumulators[step];\n\n      if (current.field) {\n        this.addField(current.field, item);\n        ++step;\n      } else if (current.accumulator) {\n        var doneAccumulating = current.accumulator(item, this);\n        if (doneAccumulating) ++step;\n      } else // no action => skip item\n        ++step;\n\n      if (!item || step >= accumulators.length) {\n        callback && callback(null, this);\n      }\n    }\n  };\n}\n\nmodule.exports = SequentialParser;","map":null,"metadata":{},"sourceType":"script"}