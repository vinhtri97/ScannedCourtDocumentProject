{"ast":null,"code":"/**\n * TableParser\n * Classifies items into columns and rows, based on their left and top coordinates,\n * and left position of column headers.\n * @author Adrien Joly, http://github.com/adrienjoly\n * This content is released under the MIT License.\n **/\nfunction TableParser() {\n  this.rows = {};\n}\n\n;\n\nTableParser.prototype.processItem = function (item, col) {\n  var row = this.rows[\"\" + item.y] = this.rows[\"\" + item.y] || {};\n  (row[col] = row[col] || []).push(item);\n};\n\nTableParser.prototype.processHeadingItem = function (item, col) {\n  this.processItem({\n    y: 0,\n    x: item.x,\n    text: item.text\n  }, col);\n}; // Rows\n\n\nfunction sortAsFloatValues(values) {\n  return values.slice().sort(function (a, b) {\n    return parseFloat(a) - parseFloat(b);\n  });\n}\n\nTableParser.prototype.getRows = function () {\n  var rows = this.rows;\n  var yValues = sortAsFloatValues(Object.keys(rows));\n  return yValues.map(function (y) {\n    return rows[\"\" + y];\n  });\n};\n\nfunction renderRows(rows) {\n  return (rows || []).map(function (row, rowId) {\n    var cells = [];\n\n    for (var i in row) {\n      for (var j in row[i]) {\n        cells.push(row[i][j].x + \": \" + row[i][j].text);\n      }\n    }\n\n    return rowId + \":\\t\" + cells.join(\", \");\n  }).join(\"\\n\");\n}\n\nTableParser.prototype.renderRows = function () {\n  return renderRows(this.getRows());\n}; // Matrix\n\n\nfunction getSortedXValues(rows) {\n  var xSet = {};\n\n  for (var y in rows) {\n    for (var x in rows[y]) {\n      xSet[x] = true;\n    }\n  }\n\n  return sortAsFloatValues(Object.keys(xSet));\n}\n\nTableParser.prototype.getMatrix = function () {\n  var rows = this.getRows();\n  var xValues = getSortedXValues(rows);\n  return rows.map(function (row, y) {\n    var rowNew = [];\n\n    for (var x in row) {\n      var items = row[x];\n      var colN = xValues.indexOf(x);\n      rowNew[colN] = (rowNew[colN] || []).concat(items);\n    }\n\n    return rowNew;\n  });\n};\n\nfunction getText(item) {\n  return item.text;\n}\n\n;\n\nfunction joinCellCollisions(separ) {\n  return function (cell) {\n    return (cell || []).map(getText).join(separ).substr(0, 7);\n  };\n}\n\nfunction renderMatrix(matrix) {\n  return (matrix || []).map(function (row) {\n    return (row || []).map(joinCellCollisions(\"+\")).join(\"\\t\");\n  }).join(\"\\n\");\n}\n\nTableParser.prototype.renderMatrix = function () {\n  return renderMatrix(this.getMatrix());\n};\n\nmodule.exports = TableParser;","map":null,"metadata":{},"sourceType":"script"}