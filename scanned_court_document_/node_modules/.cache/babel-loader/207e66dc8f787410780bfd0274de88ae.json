{"ast":null,"code":"/**\n * parseColumns, for pdfreader, used by the Rule class.\n * accumulates values below each column header (on 1st row, given their name), without detecting empty rows.\n * TODO: use ColumnsParser\n * @author Adrien Joly, http://github.com/adrienjoly\n * This content is released under the MIT License.\n **/\nvar LOG = require(\"./LOG.js\");\n\nmodule.exports = function ()\n/* columns */\n{\n  this.output = [];\n  this.cols = Array.prototype.slice.apply(arguments);\n  var colNames = this.cols,\n      colX = [],\n      rows = this.output,\n      line = -1,\n      // header\n  lineY = null;\n\n  function processItem(item) {\n    if (line == -1) {\n      // parse x-position of column headers\n      var i = colNames.indexOf(item.text);\n      if (i > -1) colX[i] = item.x;\n\n      if (colX.length == colNames.length) {\n        LOG(\"table header:\", colNames, colX);\n        line++;\n      }\n    } else {\n      if (lineY === null) {\n        lineY = item.y;\n      } else if (lineY != item.y) {\n        lineY = item.y;\n        line++;\n      } // parsing values for each column\n\n\n      var col = 0;\n\n      for (var i = colX.length - 1; i >= 0; --i) {\n        if (item.x > colX[i]) {\n          col = i;\n          break;\n        }\n      }\n\n      rows[lineY] = rows[lineY] || {};\n      rows[lineY][col] = item.text;\n    }\n  }\n\n  ;\n  processItem(this.currentItem); // apply on header's first item\n\n  return processItem; // then the same function will be run on all following items, until another rule is triggered\n};","map":null,"metadata":{},"sourceType":"script"}