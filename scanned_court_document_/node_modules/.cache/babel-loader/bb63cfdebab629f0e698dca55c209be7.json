{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\n\n/**\r\n * @param {DOMElement} element\r\n * @param {DOMDocument} doc\r\n * @return {boolean}\r\n */\n\nfunction _isViewportScrollElement(element, doc) {\n  return !!doc && (element === doc.documentElement || element === doc.body);\n}\n/**\r\n * Scroll Module. This class contains 4 simple static functions\r\n * to be used to access Element.scrollTop/scrollLeft properties.\r\n * To solve the inconsistencies between browsers when either\r\n * document.body or document.documentElement is supplied,\r\n * below logic will be used to alleviate the issue:\r\n *\r\n * 1. If 'element' is either 'document.body' or 'document.documentElement,\r\n *    get whichever element's 'scroll{Top,Left}' is larger.\r\n * 2. If 'element' is either 'document.body' or 'document.documentElement',\r\n *    set the 'scroll{Top,Left}' on both elements.\r\n */\n\n\nvar Scroll = {\n  /**\r\n   * @param {DOMElement} element\r\n   * @return {number}\r\n   */\n  getTop: function getTop(element) {\n    var doc = element.ownerDocument;\n    return _isViewportScrollElement(element, doc) ? // In practice, they will either both have the same value,\n    // or one will be zero and the other will be the scroll position\n    // of the viewport. So we can use `X || Y` instead of `Math.max(X, Y)`\n    doc.body.scrollTop || doc.documentElement.scrollTop : element.scrollTop;\n  },\n\n  /**\r\n   * @param {DOMElement} element\r\n   * @param {number} newTop\r\n   */\n  setTop: function setTop(element, newTop) {\n    var doc = element.ownerDocument;\n\n    if (_isViewportScrollElement(element, doc)) {\n      doc.body.scrollTop = doc.documentElement.scrollTop = newTop;\n    } else {\n      element.scrollTop = newTop;\n    }\n  },\n\n  /**\r\n   * @param {DOMElement} element\r\n   * @return {number}\r\n   */\n  getLeft: function getLeft(element) {\n    var doc = element.ownerDocument;\n    return _isViewportScrollElement(element, doc) ? doc.body.scrollLeft || doc.documentElement.scrollLeft : element.scrollLeft;\n  },\n\n  /**\r\n   * @param {DOMElement} element\r\n   * @param {number} newLeft\r\n   */\n  setLeft: function setLeft(element, newLeft) {\n    var doc = element.ownerDocument;\n\n    if (_isViewportScrollElement(element, doc)) {\n      doc.body.scrollLeft = doc.documentElement.scrollLeft = newLeft;\n    } else {\n      element.scrollLeft = newLeft;\n    }\n  }\n};\nmodule.exports = Scroll;","map":null,"metadata":{},"sourceType":"script"}