{"ast":null,"code":"'use strict';\n\nvar nodeUtil = require(\"util\"),\n    _ = require(\"underscore\"),\n    PDFUnit = require('./pdfunit.js');\n\nvar PDFAnno = function PDFAnnoClosure() {\n  //BEGIN - MQZ 9/19/2012. Helper functions to parse acroForm elements\n  function setupRadioButton(annotation, item) {\n    var asName = ''; //PDF Spec p.689: parent item's DV holds the item's value that is selected by default\n\n    var po = annotation.get('Parent');\n\n    if (po) {\n      po.forEach(function (key, val) {\n        if (key === 'DV') {\n          asName = val.name || '';\n        } else if (key === 'TU') {\n          //radio buttons use the alternative text from the parent\n          item.alternativeText = val;\n        } else if (key == 'TM') {\n          item.alternativeID = val;\n        }\n      });\n    } //PDF Spec p.606: get appearance dictionary\n\n\n    var ap = annotation.get('AP'); //PDF Spec p.614 get normal appearance\n\n    var nVal = ap.get('N'); //PDF Spec p.689\n\n    nVal.forEach(function (key, value) {\n      if (key.toLowerCase() != \"off\") {\n        //value if selected\n        item.value = key; //export value\n\n        item.checked = key === asName; //initial selection state\n      }\n    });\n    if (!item.value) item.value = \"off\";\n  }\n\n  function setupPushButton(annotation, item) {\n    //button label: PDF Spec p.640\n    var mk = annotation.get('MK');\n    item.value = mk.get('CA') || ''; //button action: url when mouse up: PDF Spec:p.642\n\n    item.FL = \"\";\n    var ap = annotation.get('A');\n\n    if (ap) {\n      var sp = ap.get('S');\n      item.FL = ap.get(sp.name);\n    }\n  }\n\n  function setupCheckBox(annotation, item) {\n    //PDF Spec p.606: get appearance dictionary\n    var ap = annotation.get('AP'); //PDF Spec p.614 get normal appearance\n\n    var nVal = ap.get('N'); //PDF Spec p.689\n\n    var i = 0;\n    nVal.forEach(function (key, value) {\n      i++;\n      if (i == 1) //initial selection state\n        item.value = key;\n    });\n  }\n\n  function setupDropDown(annotation, item) {\n    //PDF Spec p.688\n    item.value = annotation.get('Opt') || [];\n  }\n\n  function setupFieldAttributes(annotation, item) {\n    //MQZ. Jan.03.2013. additional-actions dictionary\n    //PDF Spec P.648. 8.5.2. Trigger Events\n    var aa = annotation.get('AA');\n\n    if (!aa) {\n      return;\n    } //PDF Spec p.651 get format dictionary\n\n\n    var nVal = aa.get('F');\n\n    if (!nVal) {\n      nVal = aa.get('K');\n      if (!nVal) return;\n    }\n\n    nVal.forEach(function (key, value) {\n      if (key === \"JS\") {\n        processFieldAttribute(value, item);\n      }\n    });\n  }\n\n  var AFSpecial_Format = ['zip', 'zip', 'phone', 'ssn', '']; //  let AFNumber_Format = ['nDec', 'sepStyle', 'negStyle', 'currStyle', 'strCurrency', 'bCurrencyPrepend'];\n  //– nDec is the number of places after the decimal point;\n  //– sepStyle is an integer denoting whether to use a separator or not. If sepStyle=0, use commas. If sepStyle=1, do not separate.\n  //– negStyle is the formatting used for negative numbers: 0 = MinusBlack, 1 = Red, 2 = ParensBlack, 3 = ParensRed\n  //– currStyle is the currency style - not used\n  //- strCurrency is the currency symbol\n  //– bCurrencyPrepend\n  //  let AFDate_FormatEx = [\"m/d\", \"m/d/yy\", \"mm/dd/yy\", \"mm/yy\", \"d-mmm\", \"d-mmm-yy\", \"dd-mmm-yy\", \"yymm-dd\", \"mmm-yy\", \"mmmm-yy\", \"mmm d, yyyy\", \"mmmm d, yyyy\", \"m/d/yy h:MM tt\", \"m/d/yy HH:MM\"];\n\n  function processFieldAttribute(jsFuncName, item) {\n    if (item.hasOwnProperty('TName')) return;\n    var vParts = jsFuncName.split('(');\n    if (vParts.length !== 2) return;\n    var funcName = vParts[0];\n    var funcParam = vParts[1].split(')')[0];\n\n    switch (funcName) {\n      case 'AFSpecial_Format':\n        item.TName = AFSpecial_Format[Number(funcParam)];\n        break;\n\n      case 'AFNumber_Format':\n        //              nfs = funcParam.split(',');\n        //set the Money fields to use the Number type with no decimal places after, no commas, and bCurrencyPrepend is set as true; (o use a negative sign (fits the PDF layout and our print formatting as well).\n        //              if (nfs[0] === '0' && nfs[1] === '1' && nfs[5])\n        //                  item.TName = 'money';\n        //              else\n        item.TName = 'number';\n        break;\n\n      case 'AFDate_FormatEx':\n        item.TName = 'date';\n        item.MV = funcParam.replace(/^'+|^\"+|'+$|\"+$/g, ''); //mask value\n\n        break;\n\n      case 'AFSpecial_KeystrokeEx':\n        //special format: \"arbitrary mask\"\n        var maskValue = funcParam.replace(/^'+|^\"+|'+$|\"+$/g, ''); //mask value\n\n        if (!!maskValue && maskValue.length > 0 && maskValue.length < 64) {\n          item.TName = 'mask'; //fixed length input\n\n          item.MV = maskValue;\n        }\n\n        break;\n\n      case 'AFPercent_Format':\n        item.TName = 'percent'; //funcParam => 2, 0, will specified how many decimal places\n\n        break;\n    }\n  } //END - MQZ 9/19/2012. Helper functions to parse acroForm elements\n  // private static\n\n\n  var _nextId = 1;\n  var _name = 'PDFAnno'; // constructor\n\n  var cls = function cls(field, viewport, Fields, Boxsets) {\n    // private\n    var _id = _nextId++; // public (every instance will have their own copy of these methods, needs to be lightweight)\n\n\n    this.get_id = function () {\n      return _id;\n    };\n\n    this.get_name = function () {\n      return _name + _id;\n    };\n  };\n\n  cls.prototype.clean = function () {\n    delete this.get_id;\n    delete this.get_name;\n  };\n\n  cls.processAnnotation = function (annotation, item) {\n    if (item.fieldType == 'Btn') {\n      //PDF Spec p.675\n      if (item.fieldFlags & 32768) {\n        setupRadioButton(annotation, item);\n      } else if (item.fieldFlags & 65536) {\n        setupPushButton(annotation, item);\n      } else {\n        setupCheckBox(annotation, item);\n      }\n    } else if (item.fieldType == 'Ch') {\n      setupDropDown(annotation, item);\n    } else if (item.fieldType == 'Tx') {\n      setupFieldAttributes(annotation, item);\n    }\n  };\n\n  return cls;\n}();\n\nmodule.exports = PDFAnno;","map":null,"metadata":{},"sourceType":"script"}