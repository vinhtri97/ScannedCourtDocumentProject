{"ast":null,"code":"/**\n * PdfReader: class that reads a PDF file, and calls a function on each item found while parsing that file.\n * @author Adrien Joly, http://github.com/adrienjoly\n * This content is released under the MIT License.\n * \n * An item object can match one of the following objects:\n * - null, when the parsing is over, or an error occured.\n * - {file:{path:string}}, when a PDF file is being opened.\n * - {page:integer}, when a new page is being parsed, provides the page number, starting at 1.\n * - {text:string, x:float, y:float, w:float, h:float...}, represents each text with its position.\n * \n **/\nvar LOG = require(\"./lib/LOG.js\");\n\nvar PFParser = require(\"pdf2json/pdfparser\"); // doc: https://github.com/modesty/pdf2json\n\n\nfunction forEachItem(pdf, handler) {\n  var pageNumber = 0;\n\n  for (var p in pdf.data.Pages) {\n    var page = pdf.data.Pages[p];\n    var number = ++pageNumber;\n    handler(null, {\n      page: number,\n      width: pdf.data.Width,\n      height: pdf.data.Pages[number - 1].Height\n    });\n\n    for (var t in page.Texts) {\n      var item = page.Texts[t];\n      item.text = decodeURIComponent(item.R[0].T);\n      handler(null, item);\n    }\n  }\n\n  handler();\n}\n\nfunction PdfReader(options) {\n  LOG(\"PdfReader\"); // only displayed if LOG.js was first loaded with `true` as init parameter\n\n  this.options = options || {};\n}\n/**\n * parseFileItems: calls itemHandler(error, item) on each item parsed from the pdf file\n **/\n\n\nPdfReader.prototype.parseFileItems = function (pdfFilePath, itemHandler) {\n  itemHandler(null, {\n    file: {\n      path: pdfFilePath\n    }\n  });\n  var pdfParser = new PFParser();\n  pdfParser.on(\"pdfParser_dataError\", itemHandler);\n  pdfParser.on(\"pdfParser_dataReady\", function (pdfData) {\n    forEachItem(pdfData, itemHandler);\n  });\n  var verbosity = this.options.debug ? 1 : 0;\n  pdfParser.loadPDF(pdfFilePath, verbosity);\n};\n/**\n * parseBuffer: calls itemHandler(error, item) on each item parsed from the pdf file received as a buffer\n */\n\n\nPdfReader.prototype.parseBuffer = function (pdfBuffer, itemHandler) {\n  itemHandler(null, {\n    file: {\n      buffer: pdfBuffer\n    }\n  });\n  var pdfParser = new PFParser();\n  pdfParser.on(\"pdfParser_dataError\", itemHandler);\n  pdfParser.on(\"pdfParser_dataReady\", function (pdfData) {\n    forEachItem(pdfData, itemHandler);\n  });\n  var verbosity = this.options.debug ? 1 : 0;\n  pdfParser.parseBuffer(pdfBuffer, verbosity);\n};\n\nmodule.exports = PdfReader;","map":null,"metadata":{},"sourceType":"script"}