{"ast":null,"code":"'use strict';\n\nvar _assign = require('object-assign');\n\nvar _extends = _assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule DraftEntity\r\n * @format\r\n * \r\n */\n\n\nvar DraftEntityInstance = require('./DraftEntityInstance');\n\nvar Immutable = require('immutable');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar Map = Immutable.Map;\nvar instances = Map();\nvar instanceKey = 0;\n/**\r\n * Temporary utility for generating the warnings\r\n */\n\nfunction logWarning(oldMethodCall, newMethodCall) {\n  console.warn('WARNING: ' + oldMethodCall + ' will be deprecated soon!\\nPlease use \"' + newMethodCall + '\" instead.');\n}\n/**\r\n * A \"document entity\" is an object containing metadata associated with a\r\n * piece of text in a ContentBlock.\r\n *\r\n * For example, a `link` entity might include a `uri` property. When a\r\n * ContentBlock is rendered in the browser, text that refers to that link\r\n * entity may be rendered as an anchor, with the `uri` as the href value.\r\n *\r\n * In a ContentBlock, every position in the text may correspond to zero\r\n * or one entities. This correspondence is tracked using a key string,\r\n * generated via DraftEntity.create() and used to obtain entity metadata\r\n * via DraftEntity.get().\r\n */\n\n\nvar DraftEntity = {\n  /**\r\n   * WARNING: This method will be deprecated soon!\r\n   * Please use 'contentState.getLastCreatedEntityKey' instead.\r\n   * ---\r\n   * Get the random key string from whatever entity was last created.\r\n   * We need this to support the new API, as part of transitioning to put Entity\r\n   * storage in contentState.\r\n   */\n  getLastCreatedEntityKey: function getLastCreatedEntityKey() {\n    logWarning('DraftEntity.getLastCreatedEntityKey', 'contentState.getLastCreatedEntityKey');\n    return DraftEntity.__getLastCreatedEntityKey();\n  },\n\n  /**\r\n   * WARNING: This method will be deprecated soon!\r\n   * Please use 'contentState.createEntity' instead.\r\n   * ---\r\n   * Create a DraftEntityInstance and store it for later retrieval.\r\n   *\r\n   * A random key string will be generated and returned. This key may\r\n   * be used to track the entity's usage in a ContentBlock, and for\r\n   * retrieving data about the entity at render time.\r\n   */\n  create: function create(type, mutability, data) {\n    logWarning('DraftEntity.create', 'contentState.createEntity');\n    return DraftEntity.__create(type, mutability, data);\n  },\n\n  /**\r\n   * WARNING: This method will be deprecated soon!\r\n   * Please use 'contentState.addEntity' instead.\r\n   * ---\r\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\r\n   * useful when restoring instances from the server.\r\n   */\n  add: function add(instance) {\n    logWarning('DraftEntity.add', 'contentState.addEntity');\n    return DraftEntity.__add(instance);\n  },\n\n  /**\r\n   * WARNING: This method will be deprecated soon!\r\n   * Please use 'contentState.getEntity' instead.\r\n   * ---\r\n   * Retrieve the entity corresponding to the supplied key string.\r\n   */\n  get: function get(key) {\n    logWarning('DraftEntity.get', 'contentState.getEntity');\n    return DraftEntity.__get(key);\n  },\n\n  /**\r\n   * WARNING: This method will be deprecated soon!\r\n   * Please use 'contentState.mergeEntityData' instead.\r\n   * ---\r\n   * Entity instances are immutable. If you need to update the data for an\r\n   * instance, this method will merge your data updates and return a new\r\n   * instance.\r\n   */\n  mergeData: function mergeData(key, toMerge) {\n    logWarning('DraftEntity.mergeData', 'contentState.mergeEntityData');\n    return DraftEntity.__mergeData(key, toMerge);\n  },\n\n  /**\r\n   * WARNING: This method will be deprecated soon!\r\n   * Please use 'contentState.replaceEntityData' instead.\r\n   * ---\r\n   * Completely replace the data for a given instance.\r\n   */\n  replaceData: function replaceData(key, newData) {\n    logWarning('DraftEntity.replaceData', 'contentState.replaceEntityData');\n    return DraftEntity.__replaceData(key, newData);\n  },\n  // ***********************************WARNING******************************\n  // --- the above public API will be deprecated in the next version of Draft!\n  // The methods below this line are private - don't call them directly.\n\n  /**\r\n   * Get the random key string from whatever entity was last created.\r\n   * We need this to support the new API, as part of transitioning to put Entity\r\n   * storage in contentState.\r\n   */\n  __getLastCreatedEntityKey: function __getLastCreatedEntityKey() {\n    return '' + instanceKey;\n  },\n\n  /**\r\n   * Create a DraftEntityInstance and store it for later retrieval.\r\n   *\r\n   * A random key string will be generated and returned. This key may\r\n   * be used to track the entity's usage in a ContentBlock, and for\r\n   * retrieving data about the entity at render time.\r\n   */\n  __create: function __create(type, mutability, data) {\n    return DraftEntity.__add(new DraftEntityInstance({\n      type: type,\n      mutability: mutability,\n      data: data || {}\n    }));\n  },\n\n  /**\r\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\r\n   * useful when restoring instances from the server.\r\n   */\n  __add: function __add(instance) {\n    var key = '' + ++instanceKey;\n    instances = instances.set(key, instance);\n    return key;\n  },\n\n  /**\r\n   * Retrieve the entity corresponding to the supplied key string.\r\n   */\n  __get: function __get(key) {\n    var instance = instances.get(key);\n    !!!instance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unknown DraftEntity key: %s.', key) : invariant(false) : void 0;\n    return instance;\n  },\n\n  /**\r\n   * Entity instances are immutable. If you need to update the data for an\r\n   * instance, this method will merge your data updates and return a new\r\n   * instance.\r\n   */\n  __mergeData: function __mergeData(key, toMerge) {\n    var instance = DraftEntity.__get(key);\n\n    var newData = _extends({}, instance.getData(), toMerge);\n\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  },\n\n  /**\r\n   * Completely replace the data for a given instance.\r\n   */\n  __replaceData: function __replaceData(key, newData) {\n    var instance = DraftEntity.__get(key);\n\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  }\n};\nmodule.exports = DraftEntity;","map":null,"metadata":{},"sourceType":"script"}